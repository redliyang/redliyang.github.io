{
	/*
	// Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"Print to console": {
		"prefix": "clg",
		"body": [
			"console.log($1)$2"
		],
		"description": "Log output to console"
	},
	"for statement": {
		"prefix": "for",
		"body": [
			"for (var i = 0, len = $1; i < len; i++) {",
			"   $2",
			"}"
		],
		"description": "my for snippet"
	},
	"jteach statement": {
		"prefix": "jteach",
		"body": [
			"jQuery.each(this, (key, dom) => {",
			"    const self = dom",
			"    $1",
			"})"
		],
		"description": "my jteach snippet"
	},
	"joeach statement": {
		"prefix": "joeach",
		"body": [
			"jQuery.each($1, ($2, $3) => {",
			"    const $4 = $3",
			"    $5",
			"})"
		],
		"description": "my joeach snippet"
	}
}

// html5选择器

// element = document.querySelector('.foo,.bar');//返回带有foo或者bar样式类的首个元素
// elements = document.querySelectorAll('div.foo');//返回所有带foo类样式的nodeList集合

// 鼠标滚轮事件

// $('#showPic').on("mousewheel DOMMouseScroll", function (e) {
//     var delta = (e.originalEvent.wheelDelta && (e.originalEvent.wheelDelta > 0 ? 1 : -1)) || // chrome & ie
//         (e.originalEvent.detail && (e.originalEvent.detail > 0 ? -1 : 1)); // firefox
//         if (delta > 0) {
// 		// 向上滚
// 	} else if (delta < 0) {
// 		// 向下滚
// 	}
// });

// 阻止冒泡

//js方法
//     function stopPropagation(e) {  
//         e = e || window.event; 
//         if(e.stopPropagation) { //W3C阻止冒泡方法  
//             e.stopPropagation();
// 	} else {  
//             e.cancelBubble = true; //IE阻止冒泡方法  
// 	}
// }  
//     document.getElementById('need_hide').onclick = function(e) {  
//         stopPropagation(e);
// }
// //jQuery方法
// $('.btn').click(function(){
//     return false //直接在方法里 return false 即可 
// })

// 止默认行为

// e.preventDefault;//阻止默认行为

// 检测浏览器是否支持svg

// function hasSVG(){
//     SVG_NS = 'http: //www.w3.org/2000/svg';
//     return !!document.createElementNS &&!!document.createElementNS(SVG_NS, 'svg').createSVGRect;
// } 
// alert(hasSVG())

// 检测是否是微信浏览器

// function is_weixin(){
//     var ua = navigator.userAgent.toLowerCase();
//     if(ua.match(/MicroMessenger/i)=="micromessenger") {
//         return true;
// 	} else {
//         return false;
// 	}
// }
// alert(is_weixin())

// jQuery获取鼠标在图片上的坐标

// $('#imgtest').click(function(e){
// 	//获取鼠标在图片上的坐标
//     alert('X：'+e.offsetX+'\n Y:'+e.offsetY);
//     //获取元素相对于页面的坐标
//     alert('X：'+$(this).offset().left+'\n Y:'+$(this).offset().top)
// });

// js获取验证码倒计时效果

// function getCode(obj,n){
//     var t=obj.value;
//     (function(){
//         if(n>0){
//             obj.disabled=true
//             obj.value='倒计时'+(n--)+'秒';
//             setTimeout(arguments.callee,
// 			1000);
// 		}else{
//             obj.disabled=false;
//             obj.value=t;
// 		}
// 	})();
// }

// jquery类似模块加载器的方法

// $.getScript("ajax/test.js", function() {
//   alert("Load was performed.");
// });

// JS检测浏览器是否支持Canvas

// if(!document.createElement('canvas').getContext){
//     alert('您的浏览器弱爆了')
// }else{
//     alert('您的浏览器很棒')
// }

// 常用正则表达式

// //匹配字母、数字、中文字符
// /^([A-Za-z0-9]|[\u4e00-\u9fa5])*$/

// //验证邮箱
// /^\w+@([0-9a-zA-Z]+[.])+[a-z]{2,4}$/ 

// //验证手机号
// /^1[3|5|8|7]\d{9}$/

// //验证URL
// /^http:\/\/.+\./

// //验证身份证号码
// /(^\d{15}$)|(^\d{17}([0-9]|X|x)$)/

// //匹配中文字符的正则表达式
// /[\u4e00-\u9fa5]/

// //匹配双字节字符(包括汉字在内)
// /[^\x00-\xff]/

// js时间戳格式化，毫秒格式化

// function formatDate(now)   {     
//     var y=now.getFullYear();
//     var m=now.getMonth()+1;
//     var d=now.getDate();
//     var h=now.getHours();
//     var m=now.getMinutes();
//     var s=now.getSeconds();
//     return y+"-"+m+"-"+d+" "+h+":"+m+":"+s;
// }     

// getBoundingClientRect() 获取元素位置

// var d=new Date(1442978789184);
// alert(formatDate(d));

// //它返回一个对象，其中包含了left、right、top、bottom四个属性
// var X= this.getBoundingClientRect().left; 
// var Y =this.getBoundingClientRect().top; 

// //相当于
// //jquery的： this.offset().left、this.offset().top
// //js的：this.offsetLeft、this.offsetTop

// HTML5全屏

// function fullscreen(element) {
//     if(element.requestFullscreen) {
//         element.requestFullscreen();
// 	} else if(element.mozRequestFullScreen) {
//         element.mozRequestFullScreen();
// 	} else if(element.webkitRequestFullscreen) {
//         element.webkitRequestFullscreen();
// 	} else if(element.msRequestFullscreen) {
//         element.msRequestFullscreen();
// 	}
// }
// fullscreen(document.documentElement)

// js字符限定，一个汉字算两个字符

//字符串截取
// function getByteVal(val, max) {
// 	var returnValue = '';
// 	var byteValLen = 0;
// 	for (var i = 0; i < val.length; i++) {
// 		if (val[i
// 		].match(/[^\x00-\xff
// 		]/ig) != null)
// 		byteValLen += 2;
// 		else
// 		byteValLen += 1;
// 		if (byteValLen > max)
// 		break;
// 		returnValue += val[i
// 		];
// 	}
// 	return returnValue;
// }
// $('#txt').bind('keyup',function(){
// 	var val=this.value;
// 	if(val.replace(/[^\x00-\xff
// 	]/g,
// 	"**").length>14){
// 		this.value=getByteVal(val,
// 		14)
// 	}
// })

// js判断是否移动端及浏览器内核

// var browser = {
//     versions: function() {
//         var u = navigator.userAgent;
//         return {
// 			trident: u.indexOf('Trident') > -1, //IE内核
// 			presto: u.indexOf('Presto') > -1, //opera内核
// 			webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核
// 			gecko: u.indexOf('Firefox') > -1, //火狐内核Gecko
// 			mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端
// 			ios: !!u.match(/\(i[^;
// 			]+;( U;)? CPU.+Mac OS X/), //ios
// 			android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android
// 			iPhone: u.indexOf('iPhone') > -1, //iPhone
// 			iPad: u.indexOf('iPad') > -1, //iPad
// 			webApp: u.indexOf('Safari') > -1 //Safari
// 		};
// 	}()
// }

// if (browser.versions.mobile || browser.versions.ios || browser.versions.android || browser.versions.iPhone || browser.versions.iPad) {
// 	alert('移动端');
// }


// 进出口
// 触发	内容
// imp→	导入整个模块 import fs from 'fs';
// imn→	导入整个模块没有模块名称 import 'animate.css'
// imd→	仅使用破坏导入模块的一部分 import {rename
// } from 'fs';
// ime→	从模块中导入一切作为别名 import * as localAlias from 'fs';
// ima→	只导入模块的一部分作为别名 import { rename as localRename
// } from 'fs';
// enf→	导出名称函数 export const log = (parameter) => { console.log(parameter);
// };
// edf→	导出默认功能 export default (parameter) => { console.log(parameter);
// };
// ecl→	导出默认的类 export default class Calculator {};
// ece→	通过扩展基础类来导出默认类 export default class Calculator extends BaseClass {};
// 班级助手
// 触发	内容
// con→	在类中添加默认构造函数 constructor() {}
// met→	在一个类中创建一个方法 add() {}
// pge→	创建一个getter属性 get propertyName() {return value;
// }
// pse→	创建一个setter属性 set propertyName(value) {}
// 各种方法
// 触发	内容
// fre→	在ES6语法中使用forEach循环 array.forEach(currentItem => {})
// fof→	为...循环 for(const item of object) {}
// fin→	for ... in循环 for(const item in object) {}
// anfn→	创建一个匿名函数 (params) => {}
// nfn→	创建一个命名函数 const add = (params) => {}
// dob→	破坏对象语法 const {rename
// } = fs
// dar→	破坏数组语法 const [first, second
// ] = [
// 	1,
// 	2
// ]
// sti→	设置间隔辅助方法 setInterval(() => {});
// sto→	设置超时帮助方法 setTimeout(() => {});
// prom→	创造一个新的承诺 return new Promise((resolve, reject) => {});
// 控制台方法
// 触发	内容
// cas→	控制台警报方法 console.assert(expression, object)
// ccl→	控制台清除 console.clear()
// cco→	控制台计数 console.count(label)
// cdi→	控制台目录 console.dir
// cer→	控制台错误 console.error(object)
// cgr→	控制台组 console.group(label)
// cge→	控制台组结束 console.groupEnd()
// clg→	控制台日志 console.log(object)
// ctr→	控制台跟踪 console.trace(object)
// cwa→	控制台警告 console.warn
// cin→	控制台信息 console.info
// clt→	控制台表 console.table